<?php
/// TAMKin oppimisympäristö, Ainopankki
/// functions.php
/// author: Annika Granlund, Jarmo Kortetjärvi
/// created: 06.07.2010
/// modified: 06.10.2010

// To avoid some problems
chdir('/var/www/html/ainopankki/');

// TAMK-notification
require_once '../lib/notification.php';

/**
 * Open database connect
 */
function databaseConnect() {
	// salasanat käyttöön
	require_once '../pupesoft/inc/salasanat.php';

	//echo 'host ' . $dbhost . ' user ' . $dbuser . ' dbpass ' . $dbpass . ' kanta ' . $dbkanta;

	$link = mysql_connect($dbhost, $dbuser, $dbpass) or die ('Ongelma ' . mysql_error());
	// Select database
	$result = mysql_select_db($dbkanta, $link) or die('Ongelmia ' . mysql_error());

	if ($result) {
		//no actions
	} else {
		print 'Ongelma avatessa tietokantaa!';
	}
} // end of function databaseConnect()

function getSaldo($tilinro, $pvm) {
	$query = "	SELECT	sum(if(saaja = '$tilinro', summa, summa * -1))
				FROM	pankkitapahtuma
				WHERE	(saaja = '$tilinro' OR maksaja = '$tilinro')
				AND		tapvm <= '$pvm' 
				AND		(eiVaikutaSaldoon = ''
						OR eiVaikutaSaldoon IS NULL
						OR eiVaikutaSaldoon = 'k'
						OR eiVaikutaSaldoon = 'a'
						OR eiVaikutaSaldoon = 'l'
						OR eiVaikutaSaldoon = 'm'
						)
				";
	$result = mysql_query($query);
	
	$row = mysql_fetch_array($result);
	
	$tilinSaldo = $row[0];
			
	/*
	// tulostetaan sql-kyselystä saadut tulokset
	while($row = mysql_fetch_array($result)) {
		$summa = $row[ 'summa' ];
		$maksaja = utf8_encode($row[ 'maksaja' ]);
		
		// jos laskun maksaja on sama kuin yrityksen oma tili, on kyse maksusta (eli tulostetaan miinusmerkki)
		if ($row[ 'maksaja' ] == $tilinro) {
			$tilinSaldo = $tilinSaldo - $summa;
		} else {
			$tilinSaldo = $tilinSaldo + $summa;
		}
	}*/
	
	if(!$tilinSaldo) $tilinSaldo=0;
	
	return $tilinSaldo;
} // end of function getSaldo()

/***********************************
päivämäärän tarkistus
***********************************/
function checkDateInput($day,$month,$year){
$input = true;	
$year = trim($year);
$month = trim($month);
$day = trim($day);
$month31 = array(1,3,5,7,8,10,12);
$month30 = array(4,6,9,11);

if(empty($year) || $year > date('Y')){
	$input = false;
}
if(empty($month) || $month > 12){ 
	$input = false;
}
if(empty($day)){
	$input = false;
}
if(in_array($month, $month31) && $day > 31){
	$input = false;	
}
if(in_array($month, $month30) && $day > 30){
	$input = false;
}
if($month == 2 && $day > 29){
	$input = false;
}
if(($month == 2) && (($year % 4 == 0) || ($year % 100 == 0)) && ($day > 28)){
	$input = false;
}

if($input != false){
	$input = sprintf('%04d',$year)."-".sprintf('%02d',$month)."-".sprintf('%02d',$day);
}
return $input;
}

/**
 * Returns one row of data in html format <tr> if data is not empty.
 *
 * @access	public
 * @param	string	$text
 * @param	string	$data
 * @param	boolean $bold		default false, if true, add class="bold" to second <td>
 * @return	if data is empty, return false
 *			if data is not empty, return one table row with correct information
 */
function getPossibleTableRow( $text, $data, $bold = false ) {
	$value = false;

	if (!empty( $data )) {
		$value .= '<tr>
					<td>' . $text . '</td>';
		if ($bold === true) {
			$value .= '<td class="bold">';
		} else {
			$value .= '<td>';
		}
		$value .= $data . '</td>
				</tr>'. "\n";
	} 
	
	return $value;
}

/**
 * Checks if data is not empty and returns hidden field with correct information
 *
 * @access	public
 * @param	mixed	$data
 * @param	string	$fieldName
 * $return	if data is empty, return false
 *			if data is not empty, return one hidden field with correct information
 */
function getPossibleHiddenField( $data, $fieldName ) {
	$value = false;
	
	if (!empty( $data )) {
		$value = "\n" . '<p><input type="hidden" name="' . $fieldName . '" value="' . $data . '"/></p>';
	}
	
	return $value;
}

/**
 * Check the date format, valid format dd.mm.yyyy
 *
 * @access	public
 * @param	mixed	$data	The date to be checked
 * $return 	if date format is valid, return true
 *			if date format isn't valid, return false
 */
function checkDateFormat($date){
	if (preg_match ("/^([0-9]{2})\.([0-9]{2})\.([0-9]{4})$/", $date, $parts)){
		if(checkdate($parts[2],$parts[1],$parts[3])){
			return $date;
		}
		else{
			return false;
		}
	}
	else{
		return false;
	}
}

/**
 * Checks if data is numeric.
 *
 * @access	public
 * @param	mixed	$data
 * @return	if data is numeric, return data
 * 			if data is not numeric, return false
 */
function isDataNumeric( $data ) {
	$value = false;
	$data = str_replace(",", ".", $data);
	
	if (is_numeric( $data ) and $data >= 0) {
		$value = $data;
	}

	return $value;
}

/**
 * Makes 18 characters long string starting with '41n0P' and ending in 15 characters long random string.
 *
 * @access	public
 * @return	string	$number		18 characters long random number
 */
function getArchiveReferenceNumber() {
	$number = uniqid('41n0P');
	return $number;
}

/**
 * Regenerates session id if it's older than 5 minutes.
 * Destroys session if the site hasn't been refreshed within 15 minutes
 *
 * @access	public
 */
function validateSession(){
	// regenerate session id if it's more than 5 minutes old
	if (!isset($_SESSION['created'])) {
		$_SESSION['created'] = time();
	}
	elseif (time() - $_SESSION['created'] > 300) {
		// session timeout
		session_regenerate_id(true);    // regenerate session ID
		$_SESSION['created'] = time();  // new creation time
	}
	
	if (isset($_SESSION['refreshed']) && ((time() - $_SESSION['refreshed']) > 900)) {
		// session timeout
		session_destroy();   // destroy session data in storage
		session_unset();     // unset $_SESSION variable for the runtime
		header('Location: index.php');
	}
	else{
		$_SESSION['refreshed'] = time();
	}
}
?>
